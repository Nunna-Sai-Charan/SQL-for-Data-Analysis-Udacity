Quiz Question

Often there is confusion about the difference between WHERE and HAVING. Select all the statements that 
are true regarding HAVING and WHERE statements.

ans) All the statements are correct.

i. WHERE subsets the returned data based on a logical condition.            
ii. WHERE appears after the FROM, JOIN and ON clauses, but before GROUP BY.    
iii. HAVING appears after the GROUP BY clause, but before the ORDER BY clause.        
iv. HAVING is like WHERE, but it works on logical statements involving aggregations.

Questions: HAVING
Use the SQL environment below to assist with answering the following questions. Whether you get stuck or 
you just want to double check your solutions, my answers can be found at the top of the next concept.

1. How many of the sales reps have more than 5 accounts that they manage?

Query :

SELECT COUNT(*) num_reps_above5
FROM 
(
        SELECT s.id, s.name, COUNT(*) num_accounts
        FROM accounts a
        JOIN sales_reps s
        ON s.id = a.sales_rep_id
        GROUP BY s.id, s.name
        HAVING COUNT(*) > 5
        ORDER BY num_accounts
) AS Table1;

2. How many accounts have more than 20 orders?

Query :

SELECT COUNT(*) as no_of_accounts
FROM 
(
SELECT a.id, a.name, COUNT(*) as no_of_orders
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.id, a.name
HAVING COUNT(*)>20
) AS TABLE1;

3. Which account has the most orders?

Query :

SELECT a.id, a.name, COUNT(*) as no_of_orders
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.id, a.name
ORDER BY no_of_orders DESC
LIMIT 1;

4. Which accounts spent more than 30,000 usd total across all orders?

Query :

SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd)>30000
ORDER BY total_spent;


5. Which accounts spent less than 1,000 usd total across all orders?

Query :

SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.id, a.name
HAVING SUM(o.total_amt_usd)<1000
ORDER BY total_spent;

6. Which account has spent the most with us?

Query :

SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent DESC
LIMIT 1;

7. Which account has spent the least with us?

Query :

SELECT a.id, a.name, SUM(o.total_amt_usd) total_spent
FROM orders o
JOIN accounts a 
ON a.id=o.account_id
GROUP BY a.id, a.name
ORDER BY total_spent
LIMIT 1;


8. Which accounts used facebook as a channel to contact customers more than 6 times?

Query :

SELECT a.id, a.name, w.channel, COUNT(*) as contact_times
FROM accounts a
JOIN web_events w
ON w.account_id=a.id
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*)>6 AND w.channel='facebook'
ORDER BY contact_times;

9. Which account used facebook most as a channel?

Query :

SELECT a.id, a.name, w.channel, COUNT(*) as contact_times
FROM accounts a
JOIN web_events w
ON w.account_id=a.id
GROUP BY a.id, a.name, w.channel
HAVING COUNT(*)>6 AND w.channel='facebook'
ORDER BY contact_times DESC
LIMIT 1;

10. Which channel was most frequently used by most accounts?

Query :

SELECT a.id, a.name, w.channel, COUNT(*) use_of_channel
FROM accounts a
JOIN web_events w
ON a.id = w.account_id
GROUP BY a.id, a.name, w.channel
ORDER BY use_of_channel DESC
LIMIT 10;